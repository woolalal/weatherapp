{"version":3,"sources":["components/Country.js","components/Forecast.js","components/App.js","index.js"],"names":["Country","props","name","temperature","feelslike","description","wind","sunrise","sunset","Forecast","className","date","sunrises","map","desc","id","des","src","icon","alt","API_KEY","App","useState","weathers","setWeather","setName","search","setSearch","forecast","setForecast","setDate","a","fetch","res","json","data","console","log","coord","lat","lon","response","secdata","daily","useEffect","getData","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","onSubmit","evt","preventDefault","type","placeholder","onChange","target","value","card","main","temp","feels_like","weather","speed","sys","toLocaleTimeString","cast","dt","toLocaleDateString","day","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56560cab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Country = (props) => {\n\n    return (\n        <div>\n            <p>Country Name: {props.name}</p>\n            <p>Current Temperature: {props.temperature} 째C</p>\n            <p>Feels like: {props.feelslike} 째C</p>\n            <p>Weather Description: {props.description}</p>\n            <p>Wind Speed: {props.wind} m/s</p>\n            <p>Sunrise Time: {props.sunrise}</p>\n            <p>Sunset Time: {props.sunset}</p>\n        </div>\n    )\n}\n\nexport default Country;\n","import React from 'react'\n\nconst Forecast = (props) => {\n\n    \n    return (\n        <div className=\"forecast-container\">\n            <p>Date: {props.date}</p>\n            <p>Weather Temperature: {props.temperature} 째C</p>\n            <p>Weather Feels Like: {props.feelslike} 째C</p>\n            <p>Sunrise Time: {props.sunrises}</p>\n            <p>Sunset Time: {props.sunset}</p>\n            {props.description.map(desc => (              \n                <p key={desc.id}>Weather Description: {desc.description}</p>\n                \n            ))}\n\n            {props.description.map(des => (\n                <img src={'http://openweathermap.org/img/wn/'+ des.icon + '@2x.png'} \n                key={des.id} alt=\"weather-img\">\n                </img>\n            ))}\n            \n        </div>\n    )\n}\n\nexport default Forecast\n","import React, {useEffect, useState} from 'react';\nimport Country from './Country';\nimport Forecast from './Forecast';\n\n\nconst API_KEY = 'ca01d0a48305d933ddc756062be418ab';\n//const URL = 'api.openweathermap.org/data/2.5/weather?id={city id}&appid={API key}';\n//const URL2 = 'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}';\n\n\nfunction App(){\n    const [weathers, setWeather] = useState([]);\n    const [name, setName] = useState(\"\");\n    const [search, setSearch] = useState(\"Singapore\");\n\n    const [forecast, setForecast] = useState([]);\n    const [date, setDate] = useState(\"\");\n\n    \n\n    useEffect(()=>{\n        getData();\n       // getLocation();\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n        var yyyy = today.getFullYear();\n\n        today = mm + '/' + dd + '/' + yyyy;\n        setDate(today);\n    },[search]);\n\n    function getChange(evt){\n        console.log(evt.target.value);\n        setName(evt.target.value);\n    }\n\n    async function getData()\n    {\n        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=${API_KEY}&units=metric`);\n        const data = await res.json();\n        console.log([data]);\n        setWeather([data]);\n\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&exclude=hourly&appid=${API_KEY}&units=metric`);\n        const secdata = await response.json();\n        console.log(secdata);\n        setForecast(secdata.daily);\n        \n        // console.log(data.coord.lon);\n        // setLat(data.coord.lat);\n        // setLon(data.coord.lon);\n         \n    }\n\n    function getSearch(evt){\n        evt.preventDefault();\n        setName(\"\");\n        setSearch(name);\n\n    }\n    \n\n\n    return <div className=\"weather\">\n        <h3>Enter country/city name to search weather for</h3>\n        <form onSubmit={getSearch} className=\"weatherform\">\n        <input type=\"text\" placeholder=\"Country Name\" className=\"search-input\" onChange={getChange} value={name}></input>\n        <button className=\"search-btn\">Search</button>\n        <h4>{date}</h4>\n        </form>    \n            {weathers.map(card => (\n            <Country \n                key = {card.id}\n                name = {card.name}\n                temperature = {card.main.temp}\n                feelslike = {card.main.feels_like}\n                description = {card.weather[0].description}\n                wind = {card.wind.speed}\n                sunrise = {new Date(card.sys.sunrise * 1000).toLocaleTimeString('en-IN')}\n                sunset = {new Date(card.sys.sunset * 1000).toLocaleTimeString('en-IN')}\n            />\n            ))}\n            <div className=\"forecast-section\">\n            {forecast.map(cast => (\n                <Forecast\n                    key = {cast.dt}\n                    date = {new Date(cast.dt * 1000).toLocaleDateString('en-US')}\n                    temperature = {cast.temp.day}\n                    feelslike = {cast.feels_like.day}\n                    description = {cast.weather}\n                    sunrises = {new Date(cast.sunrise * 1000).toLocaleTimeString('en-IN')}\n                    sunset = {new Date(cast.sunset * 1000).toLocaleTimeString('en-IN')}\n                />\n            ))}\n            </div>\n        \n    </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}